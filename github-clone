#!/usr/bin/env perl
#
# This program accepts one argument: the username of someone on
# Github.  It then clones all of that person's repositories in the
# current directory, or updates them if they already exist.  This is
# intended to be a simple utility for cloning a programmer's work in
# one bulk swoop.
#
# Written by Eric James Michael Ritz
#     <Ren@lifesnotsimple.com>
#     September 2011
#
# Contributors (In Alphabetical Order):
#     Seth Hayward
#     Richard Peterson
#
# This program is Public Domain.

use common::sense;
use LWP::UserAgent;
use JSON;
use IO::Prompt;

# The base URI for the Github API.  This intentionally does not end
# with a slash so that interpolation is friendlier on the eyes later.
our $github_api_uri = "https://api.github.com";

# Our user agent for communicating with Github.
our $user_agent = LWP::UserAgent->new;

# Give our user agent a unique name just to be a good net citizen.
$user_agent->agent("github-clone/1.0");

# Accepts a username and tries to return an array reference
# representing information on that user's repositories.  See the
# documentation
#
#     http://developer.github.com/v3/repos/
#
# for details on what should appear in the array.  If we do not get a
# successful response from Github then the program will die with an
# appropriate error message.
sub get_repos_for($) {
    my ($username) = @_;
    my $api_uri = "${github_api_uri}/users/${username}/repos";
    my $request = HTTP::Request->new(GET => $api_uri);
    my $response = $user_agent->request($request);

    if ($response->is_success) {
        return decode_json($response->content);
    }

    die "Error: Received $response->message\n";
}

# For each repository we either run git-fetch if it already exists, or
# if not then we ask the user whether or not they want to clone it.
# The function accepts an array reference of repositories as returned
# by get_repos_for().
sub clone_or_fetch($) {
    my ($repos) = @_;

    say "Cloning or fetching ", scalar @$repos , " repositories.";
    say "Press y or n to clone repositories.  The default choice is n.\n";

    for (@$repos) {
        if (-d "$_->{name}") {
            say "Fetching $_->{name}";
            qx(git --git-dir=$_->{name}/.git fetch);
        }
        else {
            qx(git clone $_->{clone_url})
                if prompt(
                    -prompt => "Clone $_->{name}: $_->{description}? ",
                    -default => "n",
                    -yn,
                );
        }
    }
}

# Takes the return value of get_repos_for() and lists all of those
# repositories and their description.
sub list($) {
    my ($repos) = @_;
    say "Total Number of Repositories: ", scalar @$repos, "\n";
    say "$_->{name}: $_->{description}" for @$repos;
}

######################################################################
#
# Main Logic
#
######################################################################

my $user = shift @ARGV;
my $command = shift @ARGV;

unless ($user) {
    say "Usage: ./github-clone <username> [--list]" and exit(1);
}

if ($command ~~ /--list/o) {
    list(get_repos_for($user));
}
else {
    clone_or_fetch(get_repos_for($user));
}

__END__
